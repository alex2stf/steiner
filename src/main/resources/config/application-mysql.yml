server:
  port: 8033

spring:
  application:
    name: steiner-console
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://127.0.0.1:3306/test
#    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    hikari:
      leak-detection-threshold: 10000
      maximum-pool-size: 20
      minimumIdle: 4

  jpa:
    show-sql: true
    open-in-view: true
    database-platform: org.hibernate.dialect.MySQL5Dialect
    database: test
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
      hibernate.jdbc.lob.non_contextual_creation: true

logging:
  level:
    ROOT: INFO
    com.zaxxer.hikari: debug
  pattern:
    console: "[%date] [%level] [%X{THREAD_ID}] [%X{correlationId}] [%X{UUID}] [%X{TRANSACTION_ID}] [%X{SOURCE_IP}] [%X{HTTP_REQ_METHOD}] [%X{ENDPOINT}] [%X{SOAP_ACTION}] [%X{HTTP_RESP_CODE}] [%logger{10}] [%file:%line] [><[%msg]><] [%ex{full}]%n"


application:
  user: root
  password: admin
  secret: my-secret-token-to-change-in-production
  security-mode: NONE
  enable:
    debug: true
    keycloack-login: false


#the following setup is optional
queue-props:
  url: "amqp://localhost:5672/%2f"
  username: "rabbitmq"
  password: "rabbitmq"
  topicName: "documents-topic"


#keycloak:
#  auth-server-url: http://127.0.0.1:8080/auth/
#  resource: client-service
#  realm: dev
#  public-client: true
#  principal-attribute:


#oauth configuration using keycloak
#security:
#  oauth2:
#    resource:
#      id: client-service
#      token-info-uri: ${application.security.auth-provider}/protocol/openid-connect/token/introspect
#      user-info-uri: ${application.security.auth-provider}/protocol/openid-connect/userinfo
#      jwt:
#        key-value: -----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkW7S4OVQagENNBRo/kOn3QtArsJFX5Vq2bIOlMyoO7XQZOSk6SywoahFZ+3UUWiyD81zgyyPNIu151dkEKiku+nwd3mZGFIrRMe9MMhLPTTXNtpgGj82FjGEN4n9NOC4hSMnlI6cd5vwLLA8sAQ9qFsspWQZu4fPKeFh68DKRkLrtFav9zPegQvZh2AjbIYVS3O2Ws/sxZhHchPqOxyUl1rskHARc0k2xw/2gIrEYYNjy6F4rh1j1iqYXRhvUFQOeNi4oAoEiiRdnJhNGv4gfbaT3IlbLqKmHKp7oz4J/RoyG8LzU1Ex8FfVgvc/wcwlR2bAkcYTeP7s5Zca1OXB3wIDAQAB\n-----END PUBLIC KEY-----
#    client:
#      client-id: client-service
#      client-secret: 36d6aaa5-45bb-4e1b-bf9e-f7add820e76f
#      user-authorization-uri: ${application.security.auth-provider}/protocol/openid-connect/auth
#      access-token-uri: ${application.security.auth-provider}/protocol/openid-connect/token
#      scope: openid
#      grant-type: client_credentials